/*
Copyright 2020 The Kubernetes Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/google/go-tpm/legacy/tpm2"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	flag "github.com/spf13/pflag"
	"go.uber.org/zap"
	"go.uber.org/zap/zapcore"
	"sigs.k8s.io/aws-encryption-provider/pkg/cloud"
	"sigs.k8s.io/aws-encryption-provider/pkg/healthz"
	"sigs.k8s.io/aws-encryption-provider/pkg/livez"
	"sigs.k8s.io/aws-encryption-provider/pkg/logging"
	"sigs.k8s.io/aws-encryption-provider/pkg/plugin"
	"sigs.k8s.io/aws-encryption-provider/pkg/server"
	"sigs.k8s.io/aws-encryption-provider/pkg/tpm"
)

func main() {
	var (
		healthPort    = flag.String("health-port", ":8080", "port to serve /healthz and /livez")
		healthzPath   = flag.String("healthz-path", "/healthz", "deep health check path")
		livezPath     = flag.String("livez-path", "/livez", "liveness/connectivity check path")
		addr          = flag.String("listen", "/var/run/kmsplugin/socket.sock", "GRPC listen address")
		key           = flag.String("key", "", "AWS KMS Key")
		region        = flag.String("region", "", "AWS Region")
		kmsEndpoint   = flag.String("kms-endpoint", "", "use this KMS endpoint instead of the one generated by AWS sdk")
		qpsLimit      = flag.Int("qps-limit", 0, "number of requests per second to allow for KMS API calls (0 to not rate limit)")
		burstLimit    = flag.Int("burst-limit", 0, "number of tokens that can be consumed in a single call")
		encryptionCtx = flag.StringToString("encryption-context", nil, "AWS KMS Encryption Context (e.g. 'a=b,c=d')")
		debug         = flag.Bool("debug", false, "Print debug level logs")
	)
	flag.Parse()

	logLevel := zapcore.InfoLevel
	if *debug {
		logLevel = zapcore.DebugLevel
	}

	l, err := logging.NewStandardLogger(logLevel)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to configure logging")
		os.Exit(1)
	}

	zap.ReplaceGlobals(l)

	zap.L().Debug("debug logger is enabled")

	zap.L().Info("creating kms server",
		zap.String("health-port", *healthPort),
		zap.String("healthz-path", *healthzPath),
		zap.String("livez-path", *livezPath),
		zap.String("region", *region),
		zap.String("listen-address", *addr),
		zap.String("kms-endpoint", *kmsEndpoint),
		zap.Int("qps-limit", *qpsLimit),
		zap.Int("burst-limit", *burstLimit),
	)
	c, err := cloud.New(*region, *kmsEndpoint, *qpsLimit, *burstLimit)
	if err != nil {
		zap.L().Fatal("Failed to create new KMS service", zap.Error(err))
	}

	for k, v := range *encryptionCtx {
		zap.L().Info("encryption-context", zap.String("key", k), zap.String(
			"value", v))
	}
	sharedHealthCheck := plugin.NewSharedHealthCheck(plugin.DefaultHealthCheckPeriod, plugin.DefaultErrcBufSize)
	go sharedHealthCheck.Start()
	defer sharedHealthCheck.Stop()
	s := server.New()

	p := plugin.New(*key, c, *encryptionCtx, sharedHealthCheck)
	p.Register(s.Server)

	tpmDevice, err := tpm2.OpenTPM()
	if err != nil {
		zap.L().Fatal("Failed to access local tpm device", zap.Error(err))
	}

	tpmSealer, err := tpm.NewTPMSealer(&tpmDevice, 14)
	if err != nil {
		zap.L().Fatal("Failed to create tpm sealer service", zap.Error(err))
	}

	p2 := plugin.NewV2(*key, c, *encryptionCtx, sharedHealthCheck, tpmSealer)
	p2.Register(s.Server)
	go func() {
		http.Handle(*healthzPath, healthz.NewHandler(p))
		http.Handle(*livezPath, livez.NewHandler(p))
		http.Handle("/metrics", promhttp.Handler())
		if err := http.ListenAndServe(*healthPort, nil); err != nil {
			zap.L().Fatal("Failed to start healthcheck server", zap.Error(err))
		}
	}()

	go func() {
		if err := s.ListenAndServe(*addr); err != nil {
			zap.L().Fatal("Failed to start server", zap.Error(err))
		}
	}()

	zap.L().Info("Healthchecks server started", zap.String("port", *healthPort))
	zap.L().Info("Plugin server started", zap.String("port", *addr))

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)

	signal := <-signals

	zap.L().Info("Received signal", zap.Stringer("signal", signal))
	zap.L().Info("Shutting down server")
	s.GracefulStop()
	zap.L().Info("Exiting...")
	os.Exit(0)
}
